import fleshout
import os
import random
import subprocess
import sys
import traceback

from argparse import ArgumentParser

# Design:
# 1. Takes as input a folder of xml files that we want to flesh
# 2. For each xml file, generate N random which will result in N amber files being generated.
#    The amber files will be stored in /tests/amber which will be cleaned and recreated before each test.
#    Each amber file resulting from the same xml file will be stored in a folder with the name of the parent
#    folder of the xml file.
# 3. Once amber files are being correctly generated, we should execute the amber files and check that the
#    execution is succesful, with the assumption that fleshing is correct if there are no errors.

def get_test_folders(xml_folder):
    return [test_folder for test_folder in next(os.walk(xml_folder))[1]]

def run_fleshing(amber_path, xml_folder, seeds):
    files_with_errors = []
    files_without_terminal_nodes = []
    amber_errors = []
    for test_folder in get_test_folders(xml_folder):
        test_file = os.path.join(xml_folder, test_folder, "test_0.xml")

        if not os.path.isfile(test_file):
            print(f"Skipping {test_file} as it doesn't exist")
            continue

        for seed in seeds:
            print(f"Fleshing {test_file} with seed {seed}")
            try:
                _, amber_program_str = fleshout.fleshout(test_file, None, None, seed)
                amber_file_path = test_file.replace(".xml", f"_{seed}") + ".amber"
                with open(amber_file_path, 'w') as amber_file:
                    amber_file.write(amber_program_str)
                ret_code = execute_amber(amber_path, amber_file_path) 
                if ret_code != 0:
                    amber_errors.append(amber_file_path)
            except fleshout.NoTerminalNodesInCFGError:
                files_without_terminal_nodes.append(test_file)
                print(traceback.format_exc())
                print(test_file)
                print(seed)
                break # No point trying a different seed
            except (KeyError, AssertionError):
                files_with_errors.append(test_file)
                print(traceback.format_exc())
                print(test_file)
                print(seed)

    print(f"Found {len(files_without_terminal_nodes)} CFGs without a terminal node")
    print(f"Found {len(files_with_errors)} errors when fleshing")
    print(f"Found {len(amber_errors)} errors when fleshing")

def execute_amber(amber_path, amber_file_path):
    cmd = [amber_path, "-d", amber_file_path]
    process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if process.returncode != 0:
        print(process.stdout)
        print(process.stderr)
        return process.returncode
    print(process.stdout)
    return process.returncode

def parse_args():
    t = 'This tool fleshes out a folder of CFG skeletons generated by the Alloy model.'
    parser = ArgumentParser(description=t)

    parser.add_argument('xml_folder',
                        help='The folder containing xml skeletons generated by the Alloy model. \
                            The xml skeletons should be in a file called test_0.xml and folder \
                            containing the xml file should be the name of the skeleton.')
    
    parser.add_argument('amber_path', help='The absolute path to the amber executable')

    parser.add_argument("--runner-seed", type=int, 
                        help='The seed to use for the PNG in the runner. This can be used to reproduce a particular '
                        'fleshing run, however it does not affect the seeds used when fleshing individual files. To '
                        'guarantee reproducibility the seed should be paired with the exact same fleshing seeds.')

    parser.add_argument("--fleshing-seeds", nargs="+", type=int, 
                        help='The seeds when fleshing. These can be used to reproduce the same paths in the flesher.')

    args = parser.parse_args()

    if not args.runner_seed:
        args.runner_seed = random.randrange(0, sys.maxsize)

    FLESHING_REPEATS = 5
    if not args.fleshing_seeds:
        args.fleshing_seeds = []
        for _ in range(FLESHING_REPEATS):
            args.fleshing_seeds.append(random.randrange(0, sys.maxsize))
    return args

def main():
    args = parse_args()
    xml_folder = os.path.join(os.getcwd(), args.xml_folder)
    print(f"Input folder: {args.xml_folder}")
    print(f"Runner seed: {args.runner_seed}")
    print(f"Fleshing seeds: {args.fleshing_seeds}") 
    print(f"Path to amber: {args.amber_path}")

    print("Fleshing...")
    run_fleshing(args.amber_path, xml_folder, args.fleshing_seeds)

    print(f"runner seed: {args.runner_seed}")
    print(f"fleshing seeds: {args.fleshing_seeds}")

if __name__ == "__main__":
    main()