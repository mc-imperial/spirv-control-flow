import fleshout
import os
import random
import subprocess
import sys
import traceback

from argparse import ArgumentParser

# Design:
# 1. Takes as input a folder of xml files that we want to flesh
# 2. For each xml file, generate N random which will result in N amber files being generated.
#    The amber files will be stored in /tests/amber which will be cleaned and recreated before each test.
#    Each amber file resulting from the same xml file will be stored in a folder with the name of the parent
#    folder of the xml file.
# 3. Once amber files are being correctly generated, we should execute the amber files and check that the
#    execution is succesful, with the assumption that fleshing is correct if there are no errors.

def get_test_folders(xml_folder):
    return [test_folder for test_folder in next(os.walk(xml_folder))[1]]

def run_fleshing(xml_folder, seeds):
    files_with_errors = []
    files_without_terminal_nodes = [] 
    for test_folder in get_test_folders(xml_folder):
        test_file = os.path.join(xml_folder, test_folder, "test_0.xml")

        if not os.path.isfile(test_file):
            print(f"Skipping {test_file} as it doesn't exist")
            continue
        print(f"Fleshing {test_file}")

        for seed in seeds:
            try:
                _, amber = fleshout.fleshout(test_file, None, None, seed)
                print(amber)
            
            except fleshout.NoTerminalNodesInCFGError:
                files_without_terminal_nodes.append(test_file)
            except (KeyError, AssertionError):
                files_with_errors.append(test_file)
            finally:
                print(traceback.format_exc())
                print(test_file)

    print(f"Found {len(files_without_terminal_nodes)} CFGs without a terminal node")
    print(f"Found {len(files_with_errors)} errors when fleshing")

def parse_args():
    t = 'This tool fleshes out a folder of CFG skeletons generated by the Alloy model.'
    parser = ArgumentParser(description=t)

    parser.add_argument('xml_folder',
                        help='The folder containing xml skeletons generated by the Alloy model. \
                            The xml skeletons should be in a file called test_0.xml and folder \
                            containing the xml file should be the name of the skeleton.')

    parser.add_argument("--seed", type=int, 
                        help='The seed to use for the PNG. This can be used to reproduce paths. '
                        'To guarantee reproducibility the seed should be paired with the exact same'
                        'path length argument.')
    args = parser.parse_args()

    if not args.seed:
        args.seed = random.randrange(0, sys.maxsize)
    random.seed(args.seed)
    return args

def main():
    args = parse_args()
    xml_folder = os.path.join(os.getcwd(), args.xml_folder)
    print(f"Running fleshing with input folder {xml_folder} and seed: {args.seed}")
    run_fleshing(xml_folder, [args.seed])
    print(f"seed: {args.seed}")

if __name__ == "__main__":
    main()