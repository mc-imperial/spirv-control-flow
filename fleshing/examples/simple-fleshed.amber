#!amber

SHADER compute compute_shader SPIRV-ASM

; The example has been fleshed out to follow the path:
;
; 5 -> 6 -> 10 -> 7 -> 13 -> 14 -> 9 -> 6 -> 10 -> 7 -> 14 -> 9 -> 6 -> 10 -> 8
;
; Two CFG nodes have OpBranchConditional as their terminators: 7 and 10.
;
; To follow this path, we need to make these decisions each time we reach 7 or 10:
;   7: 1, 0
;  10: 1, 1, 0
;
; We equip the shader with three storage buffers:
; - An input storage buffer with the directions for node 7
; - An input storage buffer with the directions for node 10
; - An output storage buffer that records the blocks that are executed

; SPIR-V
; Version: 1.3
; Generator: Khronos Glslang Reference Front End; 8
; Bound: 15
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %4 "main"
               OpExecutionMode %4 LocalSize 1 1 1
               OpSource ESSL 320
               OpName %4 "main"

               ; Below, we declare various types and variables for storage buffers.
               ; These decorations tell SPIR-V that the types and variables relate to storage buffers

               ; This says that the struct type, %directions_7_struct_type, is a special struct denoting a storage buffer block
               OpDecorate %directions_7_struct_type BufferBlock
               ; This says that member 0 of the struct (the only member) is at offset 0 from the start of the struct
               OpMemberDecorate %directions_7_struct_type 0 Offset 0
               ; This says that elements of the %directions_7_array_type array type are 4 bytes apart
               OpDecorate %directions_7_array_type ArrayStride 4
               ; This says that %directions_7_variable is associated with descriptor set 0, binding 0
               OpDecorate %directions_7_variable DescriptorSet 0
               OpDecorate %directions_7_variable Binding 0

               ; Similar, but for the directions_10 buffer
               OpDecorate %directions_10_struct_type BufferBlock
               OpMemberDecorate %directions_10_struct_type 0 Offset 0
               OpDecorate %directions_10_array_type ArrayStride 4
               OpDecorate %directions_10_variable DescriptorSet 0
               OpDecorate %directions_10_variable Binding 1

               ; Similar, but for the output buffer
               OpDecorate %output_struct_type BufferBlock
               OpMemberDecorate %output_struct_type 0 Offset 0
               OpDecorate %output_array_type ArrayStride 4
               OpDecorate %output_variable DescriptorSet 0
               OpDecorate %output_variable Binding 2

          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
         %11 = OpTypeBool
         %12 = OpConstantTrue %11

               ; Added: declaration of unsigned int type, and various constants
   %int_type = OpTypeInt 32 0

               ; Needed to initialize counter variables to 0
 %constant_0 = OpConstant %int_type 0

               ; Needed for incrementing counter variables
 %constant_1 = OpConstant %int_type 1

               ; Needed for storing the ids of basic blocks
 %constant_5 = OpConstant %int_type 5
 %constant_6 = OpConstant %int_type 6
 %constant_7 = OpConstant %int_type 7
 %constant_8 = OpConstant %int_type 8
 %constant_9 = OpConstant %int_type 9
%constant_10 = OpConstant %int_type 10
%constant_13 = OpConstant %int_type 13
%constant_14 = OpConstant %int_type 14

               ; Needed for declaring the sizes of the input and output arrays
 %constant_2 = OpConstant %int_type 2
 %constant_3 = OpConstant %int_type 3
%constant_15 = OpConstant %int_type 15

               ; Added: declaration of three storage buffers, for the directions and the output

               ; Array type for an array of integers, of size 2
%directions_7_array_type = OpTypeArray %int_type %constant_2
               ; A struct wrapping this array type
%directions_7_struct_type = OpTypeStruct %directions_7_array_type
               ; A storage buffer pointer to this struct type - the Uniform storage class, plus the fact that the underlying struct has the BufferBlock decoration, is what makes this a storage buffer pointer type
%directions_7_pointer_type = OpTypePointer Uniform %directions_7_struct_type
               ; The storage buffer variable - likewise it is the Uniform storage class, and the fact that the variable's type is pointer-to-BufferBlock struct that makes this a storage buffer variable
%directions_7_variable = OpVariable %directions_7_pointer_type Uniform

               ; Array type for an array of integers, of size 3
%directions_10_array_type = OpTypeArray %int_type %constant_3
               ; A struct wrapping this array type
%directions_10_struct_type = OpTypeStruct %directions_10_array_type
               ; A storage buffer pointer to this struct type
%directions_10_pointer_type = OpTypePointer Uniform %directions_10_struct_type
               ; The storage buffer variable
%directions_10_variable = OpVariable %directions_10_pointer_type Uniform

               ; Array type for an array of integers, of size 15
%output_array_type = OpTypeArray %int_type %constant_15
               ; A struct wrapping this array type
%output_struct_type = OpTypeStruct %output_array_type
               ; A storage buffer pointer to this struct type
%output_pointer_type = OpTypePointer Uniform %output_struct_type
               ; The storage buffer variable
%output_variable = OpVariable %output_pointer_type Uniform

               ; Pointer type for declaring local variables of int type
%local_int_ptr = OpTypePointer Function %int_type

               ; Pointer type for integer data in a storage buffer
%storage_buffer_int_ptr = OpTypePointer Uniform %int_type

          %4 = OpFunction %2 None %3

          %5 = OpLabel
               ; Local variables to index into the output array and the directions arrays
%output_index = OpVariable %local_int_ptr Function %constant_0
%directions_7_index = OpVariable %local_int_ptr Function %constant_0
%directions_10_index = OpVariable %local_int_ptr Function %constant_0
               ; Load the current output index
   %temp_5_0 = OpLoad %int_type %output_index
               ; Get a pointer to the output array at this index
   %temp_5_1 = OpAccessChain %storage_buffer_int_ptr %output_variable %constant_0 %temp_5_0
               ; Store the block id, %5, into the output array
               OpStore %temp_5_1 %constant_5
               ; Increment the output index and store it back to its variable
   %temp_5_2 = OpIAdd %int_type %temp_5_0 %constant_1
               OpStore %output_index %temp_5_2
               OpBranch %6

          %6 = OpLabel
               ; Similar to the instructions in block %5
   %temp_6_0 = OpLoad %int_type %output_index
   %temp_6_1 = OpAccessChain %storage_buffer_int_ptr %output_variable %constant_0 %temp_6_0
               OpStore %temp_6_1 %constant_6
   %temp_6_2 = OpIAdd %int_type %temp_6_0 %constant_1
               OpStore %output_index %temp_6_2
               OpLoopMerge %8 %9 None
               OpBranch %10

         %10 = OpLabel
               ; Similar to the instructions in block %5
  %temp_10_0 = OpLoad %int_type %output_index
  %temp_10_1 = OpAccessChain %storage_buffer_int_ptr %output_variable %constant_0 %temp_10_0
               OpStore %temp_10_1 %constant_10
  %temp_10_2 = OpIAdd %int_type %temp_10_0 %constant_1
               OpStore %output_index %temp_10_2
               ; Look up %directions_10_variable to decide which way to go
               ; Load the current index into the directions_10 array
  %temp_10_3 = OpLoad %int_type %directions_10_index
               ; Get a pointer to this element of the array
  %temp_10_4 = OpAccessChain %storage_buffer_int_ptr %directions_10_variable %constant_0 %temp_10_3
               ; Load the direction from the array
  %temp_10_5 = OpLoad %int_type %temp_10_4 
               ; Compare the loaded direction with the constant 1
  %temp_10_6 = OpIEqual %11 %temp_10_5 %constant_1
               ; Increment the direction index and store it back to its variable
  %temp_10_7 = OpIAdd %int_type %temp_10_3 %constant_1
               OpStore %directions_10_index %temp_10_7
               OpBranchConditional %temp_10_6 %7 %8

          %7 = OpLabel
               ; Similar to the instructions in block %5
   %temp_7_0 = OpLoad %int_type %output_index
   %temp_7_1 = OpAccessChain %storage_buffer_int_ptr %output_variable %constant_0 %temp_7_0
               OpStore %temp_7_1 %constant_7
   %temp_7_2 = OpIAdd %int_type %temp_7_0 %constant_1
               OpStore %output_index %temp_7_2
               ; Similar to the instructions in block %10, for deciding in which direction to go
   %temp_7_3 = OpLoad %int_type %directions_7_index
   %temp_7_4 = OpAccessChain %storage_buffer_int_ptr %directions_7_variable %constant_0 %temp_7_3
   %temp_7_5 = OpLoad %int_type %temp_7_4 
   %temp_7_6 = OpIEqual %11 %temp_7_5 %constant_1
   %temp_7_7 = OpIAdd %int_type %temp_7_3 %constant_1
               OpStore %directions_7_index %temp_7_7
               OpSelectionMerge %14 None
               OpBranchConditional %temp_7_6 %13 %14

         %13 = OpLabel
               ; Similar to the instructions in block %5
  %temp_13_0 = OpLoad %int_type %output_index
  %temp_13_1 = OpAccessChain %storage_buffer_int_ptr %output_variable %constant_0 %temp_13_0
               OpStore %temp_13_1 %constant_13
  %temp_13_2 = OpIAdd %int_type %temp_13_0 %constant_1
               OpStore %output_index %temp_13_2
               OpBranch %14

         %14 = OpLabel
               ; Similar to the instructions in block %5
  %temp_14_0 = OpLoad %int_type %output_index
  %temp_14_1 = OpAccessChain %storage_buffer_int_ptr %output_variable %constant_0 %temp_14_0
               OpStore %temp_14_1 %constant_14
  %temp_14_2 = OpIAdd %int_type %temp_14_0 %constant_1
               OpStore %output_index %temp_14_2
               OpBranch %9

          %9 = OpLabel
               ; Similar to the instructions in block %5
   %temp_9_0 = OpLoad %int_type %output_index
   %temp_9_1 = OpAccessChain %storage_buffer_int_ptr %output_variable %constant_0 %temp_9_0
               OpStore %temp_9_1 %constant_9
   %temp_9_2 = OpIAdd %int_type %temp_9_0 %constant_1
               OpStore %output_index %temp_9_2
               OpBranch %6

          %8 = OpLabel
               ; Similar to the instructions in block %5
   %temp_8_0 = OpLoad %int_type %output_index
   %temp_8_1 = OpAccessChain %storage_buffer_int_ptr %output_variable %constant_0 %temp_8_0
               OpStore %temp_8_1 %constant_8
   %temp_8_2 = OpIAdd %int_type %temp_8_0 %constant_1
               OpStore %output_index %temp_8_2
               OpReturn

               OpFunctionEnd

END

BUFFER directions_7 DATA_TYPE uint32 STD430 DATA 1 0 END
BUFFER directions_10 DATA_TYPE uint32 STD430 DATA 1 1 0 END
BUFFER output DATA_TYPE uint32 STD430 SIZE 15 FILL 0

PIPELINE compute pipeline
  ATTACH compute_shader

  BIND BUFFER directions_7 AS storage DESCRIPTOR_SET 0 BINDING 0
  BIND BUFFER directions_10 AS storage DESCRIPTOR_SET 0 BINDING 1
  BIND BUFFER output AS storage DESCRIPTOR_SET 0 BINDING 2
END

RUN pipeline 1 1 1

EXPECT directions_7 IDX 0 EQ 1 0
EXPECT directions_10 IDX 0 EQ 1 1 0
EXPECT output IDX 0 EQ 5 6 10 7 13 14 9 6 10 7 14 9 6 10 8
